service: your-name-line-member-card

frameworkVersion: '3'
custom:
  app:
    PUBLIC_BUCKET: ${self:custom.stack}
    DEPLOYMENT_BUCKET: ${self:custom.stack}-deployment
    S3_WEB_DOMAIN: ${self:custom.stack}.s3.${self:custom.region}.amazonaws.com
    LINE_CHANNEL_ID: ${ssm:/${self:custom.stage}/${self:service}/LINE_CHANNEL_ID, ''}
    LIFF_ID: ${ssm:/${self:custom.stage}/${self:service}/LIFF_ID, ''}
    USER_TABLE: ${self:custom.stack}-user
    VISIT_TABLE: ${self:custom.stack}-visit
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  stack: ${self:service}-${self:custom.stage}
  s3Sync:
    - bucketName: ${self:custom.app.PUBLIC_BUCKET}
      localDir: frontend/dist/
  serverless-layers:
    dependenciesPath: ./backend/package.json
plugins:
  - serverless-s3-sync
  - serverless-deployment-bucket
  - serverless-layers
provider:
  name: aws
  runtime: nodejs16.x
  region: ap-northeast-1
  stage: dev
  environment:
    LINE_CHANNEL_ID: ${self:custom.app.LINE_CHANNEL_ID}
    USER_TABLE: ${self:custom.app.USER_TABLE}
    VISIT_TABLE: ${self:custom.app.VISIT_TABLE}
    TZ: Asia/Tokyo
  deploymentBucket:
    name: ${self:custom.app.DEPLOYMENT_BUCKET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.app.USER_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.app.VISIT_TABLE}"
package:
  exclude:
    - backend/node_modules/**
    - backend/yarn.lock
    - frontend/**
functions:
  backend:
    handler: backend/lambda.handler
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: '{proxy+}'
          method: ANY
resources:
  Resources:
    S3Storage:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: '${self:custom.app.PUBLIC_BUCKET}'
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Storage
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::",{"Ref": "S3Storage"},"/*"]]
    StaticContentsCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: "Delivery static contents"
          PriceClass: PriceClass_200
          DefaultRootObject: index.html
          Origins:
            - Id: ApiOrigin
              DomainName:
                Fn::Join: ["", [{"Ref": "ApiGatewayRestApi"},".execute-api.${self:custom.region}.amazonaws.com"]]
              OriginPath: "/${self:custom.stage}"
              CustomOriginConfig:
                OriginProtocolPolicy: match-viewer
            - Id: S3Origin
              DomainName: ${self:custom.app.S3_WEB_DOMAIN}
              CustomOriginConfig:
                OriginProtocolPolicy: match-viewer
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: true
            SmoothStreaming: false
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: https-only
          CacheBehaviors:
            - TargetOriginId: ApiOrigin
              PathPattern: "/api/*"
              AllowedMethods:
                - HEAD
                - GET
                - POST
                - PUT
                - DELETE
                - OPTIONS
                - PATCH
              CachedMethods:
                - HEAD
                - GET
              Compress: true
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: true
              ViewerProtocolPolicy: https-only
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /
    StaticCloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.app.USER_TABLE}
    VisitTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: visitedAt
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: visitedAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.app.VISIT_TABLE}
  Outputs:
    StaticContentsCloudFrontUrl:
      Value:
        Fn::Join: ["", ["https://", {"Fn::GetAtt": ["StaticContentsCloudFront" , "DomainName"]}]]
